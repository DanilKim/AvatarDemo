/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { AnimationMixer } from 'three';
import { useLoader } from '@react-three/fiber'
import GUI from 'lil-gui'
import {FBXLoader} from 'three/examples/jsm/loaders/FBXLoader'
import { useFrame } from "@react-three/fiber";
import React, { useRef, useEffect, useState } from 'react'
import * as THREE from 'three';
import { PropaneSharp } from '@mui/icons-material';


export default function Model({ ...props }) {
  //const model = useLoader(FBXLoader, 'static/models/AvatarPreset_Ani.fbx');
  const model = useLoader(FBXLoader, 'static/models/Avatar_TPose_22.04.26.fbx');
  const head = model.getObjectByName( 'Head_m' );

  // console.log(props.faceBlendShape)
  // console.log(props.eyeSize)
  // console.log(props.eyeShape)
  // console.log(props.skin)
  head.morphTargetInfluences[64] = 0
  head.morphTargetInfluences[74] = 0
  head.morphTargetInfluences[75] = 0

  head.morphTargetInfluences[110] = 0
  head.morphTargetInfluences[111] = 0
  head.morphTargetInfluences[112] = 0
  head.morphTargetInfluences[113] = 0
  head.morphTargetInfluences[114] = 0
  head.morphTargetInfluences[115] = 0

  if(props.faceBlendShape != 1 || props.faceBlendShape != 0){
    head.morphTargetInfluences[props.faceBlendShape + 108] = 1
  }
  if(props.eyeSize == 'normal'){
    head.morphTargetInfluences[74] = 1
  }
  if(props.eyeSize == 'small'){
    head.morphTargetInfluences[75] = 1
  }
  if(props.eyeShape == 'down'){
    head.morphTargetInfluences[64] = -1
  }
  if(props.eyeShape == 'up'){
    head.morphTargetInfluences[64] = 1
  }
  
  var skinHex = 0xFFF0DC
  if(props.skin == 0){
    skinHex = 0xFFF0DC
  } else if(props.skin == 1){
    skinHex = 0xFFE1BE
  } else if(props.skin == 2){
    skinHex = 0xF5D296
  } else if(props.skin == 3){
    skinHex = 0xFFC8AF
  } else if(props.skin == 4){
    skinHex = 0xFFA591
  } else if(props.skin == 5){
    skinHex = 0xD2965F
  } else if(props.skin == 6){
    skinHex = 0x915F37
  }

  const hair = model.getObjectByName( 'Hair_Male_001' );
  const top = model.getObjectByName( 'Cloth_Top_Male_000' );
  const bottom = model.getObjectByName( 'Cloth_Bottom_Male_000' );
  const shoes = model.getObjectByName( 'Shoes_Share_001' );
  const hat = model.getObjectByName( 'ACC_Hat_001' );
  const hand = model.getObjectByName( 'Hand' );
  const arm = model.getObjectByName( 'Arm' );
  const foot = model.getObjectByName( 'Foot' );
  const body = model.getObjectByName( 'Body' );
  const leg = model.getObjectByName( 'Leg' );
  const glasses = model.getObjectByName( 'ACC_Glasses_001' );

  const bodyTexture = new THREE.TextureLoader().load( 'static/models/Texture/Body_Share_001_C.png' );
  const eyeTexture = new THREE.TextureLoader().load( 'static/models/Texture/Eye_Share_001_C.png' );
  const eyebrowTexture = new THREE.TextureLoader().load( 'static/models/Texture/Body_Share_001_C.png' );
  const eyelashTexture = new THREE.TextureLoader().load( 'static/models/Texture/Eyelash_Share_001_C.png' );
  const hairTexture = new THREE.TextureLoader().load( 'static/models/Texture/Hair_Male_001_C.png' );
  const topTexture = new THREE.TextureLoader().load( 'static/models/Texture/Cloth_Top_Male_003_010_C.png' );
  const bottomTexture = new THREE.TextureLoader().load( 'static/models/Texture/Cloth_Bottom_Male_001_001_C.png' );
  const shoesTexture = new THREE.TextureLoader().load( 'static/models/Texture/Shoes_Share_001_001_C.png' );
  const hatTexture = new THREE.TextureLoader().load( 'static/models/Texture/Cap01_low_Cap01_BaseColor.png' );

  head.material[0]  = new THREE.MeshBasicMaterial( { color: skinHex, map: bodyTexture } );
  head.material[1]  = new THREE.MeshBasicMaterial( { map: eyeTexture } );
  head.material[3]  = new THREE.MeshBasicMaterial( { color: skinHex, map: eyelashTexture } );
  head.material[5]  = new THREE.MeshBasicMaterial( { map: eyebrowTexture } );
  hair.material     = new THREE.MeshBasicMaterial( { map: hairTexture } );
  top.material      = new THREE.MeshBasicMaterial( { map: topTexture } );
  bottom.material   = new THREE.MeshBasicMaterial( { map: bottomTexture } );
  shoes.material    = new THREE.MeshBasicMaterial( { map: shoesTexture } );
  hat.material      = new THREE.MeshBasicMaterial( { map: hatTexture } );
  hand.material     = new THREE.MeshBasicMaterial( { color: skinHex, map: bodyTexture } );
  arm.material      = new THREE.MeshBasicMaterial( { color: skinHex, map: bodyTexture } );
  foot.material     = new THREE.MeshBasicMaterial( { color: skinHex, map: bodyTexture } );
  body.material     = new THREE.MeshBasicMaterial( { color: skinHex, map: bodyTexture } );
  leg.material      = new THREE.MeshBasicMaterial( { color: skinHex, map: bodyTexture } );

  hat.visible = false
  head.material[3].visible = false
  glasses.visible = false

/*
    useEffect(() => {
      const influences = head.morphTargetInfluences
      const gui = new GUI()
  
      for ( const [ key, value ] of Object.entries( head.morphTargetDictionary ) ) {
        gui.add( influences, value, 0, 1, 0.01 )
          .name( key )
          .listen( influences );
      }
      return () => gui.destroy()
    })
*/
    model.position.set(0,-9.5,0);

    model.scale.set(0.06,0.06,0.06);


  return (
    <primitive object={model} />
  )
}
